package it.water.connectors.ethereum.api.rest;

import com.fasterxml.jackson.annotation.JsonView;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import it.water.connectors.ethereum.model.EthBlockchain;
import it.water.core.api.model.PaginableResult;
import it.water.core.api.service.rest.FrameworkRestApi;
import it.water.core.api.service.rest.RestApi;
import it.water.core.api.service.rest.WaterJsonView;
import it.water.service.rest.api.security.LoggedIn;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;

/**
 * @Generated by Water Generator
 * Rest Api Interface for EthereumConnector entity.
 * This interfaces exposes all CRUD methods with default JAXRS annotations.
 */
@Path("/ethereum/blockchains")
@Api(produces = MediaType.APPLICATION_JSON, tags = "EthereumConnector API")
@FrameworkRestApi
public interface BlockchainRestApi extends RestApi {

    @LoggedIn
    @POST
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @JsonView(WaterJsonView.Public.class)
    @ApiOperation(value = "/blockchains", notes = "Blockchain Save API", httpMethod = "POST", produces = MediaType.APPLICATION_JSON)
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"), @ApiResponse(code = 401, message = "Not authorized"), @ApiResponse(code = 409, message = "Validation Failed"), @ApiResponse(code = 422, message = "Duplicated Entity"), @ApiResponse(code = 500, message = "Internal server error")})
    EthBlockchain save(EthBlockchain ethBlockchain);


    @LoggedIn
    @PUT
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @JsonView(WaterJsonView.Public.class)
    @ApiOperation(value = "/blockchains", notes = "Blockchains Update API", httpMethod = "PUT", produces = MediaType.APPLICATION_JSON)
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"), @ApiResponse(code = 401, message = "Not authorized"), @ApiResponse(code = 409, message = "Validation Failed"), @ApiResponse(code = 422, message = "Duplicated Entity"), @ApiResponse(code = 500, message = "Internal server error")})
    EthBlockchain update(EthBlockchain ethBlockchain);


    @LoggedIn
    @Path("/{id}")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @JsonView(WaterJsonView.Public.class)
    @ApiOperation(value = "/blockchains/{id}", notes = "Blockchain Find API", httpMethod = "GET", produces = MediaType.APPLICATION_JSON)
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"), @ApiResponse(code = 401, message = "Not authorized"), @ApiResponse(code = 409, message = "Validation Failed"), @ApiResponse(code = 422, message = "Duplicated Entity"), @ApiResponse(code = 500, message = "Internal server error")})
    EthBlockchain find(@PathParam("id") long id);


    @LoggedIn
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @JsonView(WaterJsonView.Public.class)
    @ApiOperation(value = "/blockchains", notes = "Blockchains Find All API", httpMethod = "GET", produces = MediaType.APPLICATION_JSON)
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"), @ApiResponse(code = 401, message = "Not authorized"), @ApiResponse(code = 409, message = "Validation Failed"), @ApiResponse(code = 422, message = "Duplicated Entity"), @ApiResponse(code = 500, message = "Internal server error")})
    PaginableResult<EthBlockchain> findAll();


    @LoggedIn
    @Path("/{id}")
    @DELETE
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @JsonView(WaterJsonView.Public.class)
    @ApiOperation(value = "/{id}", notes = "Blockchain Delete API", httpMethod = "DELETE", produces = MediaType.APPLICATION_JSON)
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"), @ApiResponse(code = 401, message = "Not authorized"), @ApiResponse(code = 409, message = "Validation Failed"), @ApiResponse(code = 422, message = "Duplicated Entity"), @ApiResponse(code = 500, message = "Internal server error")})
    void remove(@PathParam("id") long id);
}
