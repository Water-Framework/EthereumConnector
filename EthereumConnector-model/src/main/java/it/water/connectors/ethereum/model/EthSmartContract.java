package it.water.connectors.ethereum.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonView;
import it.water.core.api.entity.owned.OwnedResource;
import it.water.core.api.permission.ProtectedEntity;
import it.water.core.api.service.rest.WaterJsonView;
import it.water.core.permission.action.CrudActions;
import it.water.core.permission.annotations.AccessControl;
import it.water.core.permission.annotations.DefaultRoleAccess;
import it.water.core.validation.annotations.NoMalitiusCode;
import it.water.core.validation.annotations.NotNullOnPersist;
import it.water.repository.jpa.model.AbstractJpaEntity;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.*;


/**
 * @Generated by Water Generator
 * EthereumConnector Entity Class.
 */
//JPA
@Entity
@Table(name = "ethereum_smart_contract", uniqueConstraints = {@UniqueConstraint(columnNames = {"name", "blockchain_id"}), @UniqueConstraint(columnNames = {"contractClass", "address", "blockchain_id"})})
//example of unique constraint
@Access(AccessType.FIELD)
//Lombok
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@RequiredArgsConstructor
@Getter
@Setter(AccessLevel.PROTECTED)
@ToString
@EqualsAndHashCode(of = {"contractClass", "name", "address", "blockchain"},callSuper = true)
@AccessControl(availableActions = {CrudActions.SAVE, CrudActions.UPDATE, CrudActions.FIND, CrudActions.FIND_ALL, CrudActions.REMOVE},
        rolesPermissions = {
                //Admin role can do everything
                @DefaultRoleAccess(roleName = EthSmartContract.DEFAULT_MANAGER_ROLE, actions = {CrudActions.SAVE, CrudActions.UPDATE, CrudActions.FIND, CrudActions.FIND_ALL, CrudActions.REMOVE}),
                //Viwer has read only access
                @DefaultRoleAccess(roleName = EthSmartContract.DEFAULT_VIEWER_ROLE, actions = {CrudActions.FIND, CrudActions.FIND_ALL}),
                //Editor can do anything but remove
                @DefaultRoleAccess(roleName = EthSmartContract.DEFAULT_EDITOR_ROLE, actions = {CrudActions.SAVE, CrudActions.UPDATE, CrudActions.FIND, CrudActions.FIND_ALL})
        })
public class EthSmartContract extends AbstractJpaEntity implements ProtectedEntity, OwnedResource {

    public static final String DEFAULT_MANAGER_ROLE = "ethereumSmartContractManager";
    public static final String DEFAULT_VIEWER_ROLE = "ethereumSmartContractViewer";
    public static final String DEFAULT_EDITOR_ROLE = "ethereumSmartContractEditor";

    @NoMalitiusCode
    @NotNull
    @NotNullOnPersist
    @NonNull
    @Setter
    @JsonView(WaterJsonView.Extended.class)
    private String contractClass;

    @NoMalitiusCode
    @NotNull
    @NotNullOnPersist
    @NonNull
    @Setter
    @JsonView(WaterJsonView.Extended.class)
    private String name;

    @NoMalitiusCode
    @NotNull
    @NotNullOnPersist
    @NonNull
    @Setter
    @JsonView(WaterJsonView.Extended.class)
    private String address;

    @NoMalitiusCode
    @NotNull
    @NonNull
    @NotNullOnPersist
    @Setter
    @JsonView(WaterJsonView.Extended.class)
    private String transactionReceipt;

    @NotNullOnPersist
    @ManyToOne
    @JoinColumn(name = "blockchain_id")
    @NonNull
    @JsonBackReference
    private EthBlockchain blockchain;

    //Owner user id of the entity
    @Setter
    @NonNull
    @JsonIgnore
    @JsonView({WaterJsonView.Extended.class})
    private Long ownerUserId;

    //used just for rest communication
    @Transient
    @JsonProperty("blockchainId")
    public Long getBlockchainId(){
        return blockchain.getId();
    }

    /**
     * Used when set from rest the blockchain internal object is forced to be the one with the rigth id.
     * It is needed just to link the relation
     * @param blockchainId
     */
    public void setBlockchainId(Long blockchainId){
        EthBlockchain relatedBlockchain = new EthBlockchain("","","");
        relatedBlockchain.setId(blockchainId);
        this.setBlockchain(relatedBlockchain);
    }

}